<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://chris0016.github.io/pZero/blog</id>
    <title>▐▮▌ █ █▀█ ▟ █▀ ▙ ⬤ ▚▞▚▞ Blog</title>
    <updated>2023-07-19T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://chris0016.github.io/pZero/blog"/>
    <subtitle>▐▮▌ █ █▀█ ▟ █▀ ▙ ⬤ ▚▞▚▞ Blog</subtitle>
    <icon>https://chris0016.github.io/pZero/img/grizzly-transparent-icon.png</icon>
    <entry>
        <title type="html"><![CDATA[Fixing the millis() Rollover Issue]]></title>
        <id>https://chris0016.github.io/pZero/blog/fixing-millis-rollover</id>
        <link href="https://chris0016.github.io/pZero/blog/fixing-millis-rollover"/>
        <updated>2023-07-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[If you've encountered the millis() rollover issue in Arduino programming, you're not alone. Fortunately, there is a simple solution: leveraging the "unsigned long" data type. This data type plays a crucial role in ensuring accurate timing by extending the range of millis() and preventing time rollover. But what exactly is the "unsigned long" data type, and why is it relevant in this context?]]></summary>
        <content type="html"><![CDATA[<p>If you've encountered the millis() rollover issue in Arduino programming, you're not alone. Fortunately, there is a simple solution: leveraging the "unsigned long" data type. This data type plays a crucial role in ensuring accurate timing by extending the range of millis() and preventing time rollover. But what exactly is the "unsigned long" data type, and why is it relevant in this context?</p><p>To address the millis() rollover issue, we can declare a variable of type "unsigned long" to store the value returned by the millis() function. The "unsigned long" data type is capable of holding larger numerical values compared to "int" or "long". This extended range delays the occurrence of rollovers, allowing for more precise timing over extended periods. By using "unsigned long" variables to store the millis() value, we can effectively prevent time rollover issues and maintain accurate timekeeping in our Arduino projects.</p><div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> period </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1000</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">long</span><span class="token plain"> time_now </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">setup</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Serial</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">begin</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">115200</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">loop</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">millis</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> time_now </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> period</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        time_now </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">millis</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Serial</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Hello"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">//Run other code</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The "unsigned" aspect of "unsigned long" means it represents only non-negative values. This exclusion of negative numbers expands the range of positive values the variable can store. When it comes to timing operations, this is crucial as it ensures our code can handle values beyond what a standard "int" or "long" data type can accommodate.</p><p>Utilizing "unsigned long" is not only about fixing the millis() rollover issue; it also future-proofs your code. By employing a data type with a larger range, you allow your project to scale and adapt without running into timing limitations if you need it. Whether you're working on long-duration timing tasks or planning to expand your project's functionality, the "unsigned long" data type provides the necessary flexibility to handle larger values reliably.</p><p>In summary, by utilizing the "unsigned long" data type, we can overcome the millis() rollover issue and ensure accurate timing in Arduino programming. Its extended range and exclusion of negative values make it a powerful tool for precise timekeeping over prolonged periods. Moreover, the future-proofing aspect ensures your code remains adaptable as your project evolves. Embrace the capabilities of "unsigned long" and take control of accurate timing in your Arduino projects.</p><p>For an even more in detail explanation you can check out this <a href="https://arduino.stackexchange.com/questions/12587/how-can-i-handle-the-millis-rollover" target="_blank" rel="noopener noreferrer">stackexchange link</a>.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="reaching-out">Reaching Out<a href="#reaching-out" class="hash-link" aria-label="Direct link to Reaching Out" title="Direct link to Reaching Out">​</a></h3><p>Join the<a href="/pZero/docs/intro"> discord server </a>to ask any questions you may have or propose changes/ideas.</p><p>We also have a <a href="https://www.youtube.com/@dynamicSuspense00" target="_blank" rel="noopener noreferrer">Youtube channel </a>available with tutorial videos.</p>]]></content>
        <author>
            <name>Christopher Perez</name>
            <uri>https://sebastienlorber.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Understanding "Static" in Arduino]]></title>
        <id>https://chris0016.github.io/pZero/blog/understanding-static-in-arduino</id>
        <link href="https://chris0016.github.io/pZero/blog/understanding-static-in-arduino"/>
        <updated>2023-07-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[When it comes to programming with Arduino, you may come across the term "static" and wonder what it means and why it is used. In this blog post, we will demystify the concept of "static" in the context of Arduino programming. We will explore its significance and shed light on how leveraging static variables and functions can lead to more efficient and organized code. So, let's dive in and unravel the power of "static" in Arduino!]]></summary>
        <content type="html"><![CDATA[<p>When it comes to programming with Arduino, you may come across the term "static" and wonder what it means and why it is used. In this blog post, we will demystify the concept of "static" in the context of Arduino programming. We will explore its significance and shed light on how leveraging static variables and functions can lead to more efficient and organized code. So, let's dive in and unravel the power of "static" in Arduino!</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="understanding-the-concept-of-static">Understanding the Concept of "Static"<a href="#understanding-the-concept-of-static" class="hash-link" aria-label="Direct link to Understanding the Concept of &quot;Static&quot;" title="Direct link to Understanding the Concept of &quot;Static&quot;">​</a></h3><p>In Arduino programming, "static" is a keyword that serves multiple purposes. At its core, it defines the scope and lifetime of a variable or function within a program. By using the "static" keyword, you can create variables or functions that retain their values or existence even when they go out of scope or when a function is called repeatedly.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="efficient-use-of-memory">Efficient Use of Memory<a href="#efficient-use-of-memory" class="hash-link" aria-label="Direct link to Efficient Use of Memory" title="Direct link to Efficient Use of Memory">​</a></h3><p>One significant advantage of using "static" variables is their ability to conserve memory. In Arduino, where resources are often limited, this becomes particularly important. When a local variable is declared as "static," it is allocated memory once, and subsequent function calls do not create new instances of that variable. Instead, the variable retains its value between function calls. This optimization can significantly reduce memory consumption, leaving more resources available for other operations.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="preserving-variable-state">Preserving Variable State<a href="#preserving-variable-state" class="hash-link" aria-label="Direct link to Preserving Variable State" title="Direct link to Preserving Variable State">​</a></h3><p>Another crucial aspect of "static" variables is their ability to preserve their state across function calls. If you have a variable that needs to retain its value between different invocations of a function, declaring it as "static" ensures that the variable's value remains intact. This feature is particularly useful for maintaining counters, flags, or other variables that need to persist and track changes across multiple function calls.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="organization-and-encapsulation">Organization and Encapsulation<a href="#organization-and-encapsulation" class="hash-link" aria-label="Direct link to Organization and Encapsulation" title="Direct link to Organization and Encapsulation">​</a></h3><p>In addition to memory optimization and state preservation, "static" can also be used to encapsulate and organize related variables and functions within a single scope. By making variables or functions static within a particular class or function, you limit their visibility to only that scope, enhancing code readability and reducing naming conflicts with other parts of the program. This encapsulation can help maintain a clean and modular code structure, making it easier to understand and maintain your Arduino projects.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h3><p>Understanding the concept of "static" in Arduino programming is crucial for efficient and organized code. By utilizing static variables and functions, you can optimize memory usage, preserve variable state, and encapsulate related code within specific scopes. This not only enhances the performance and reliability of your Arduino projects but also improves code readability and maintainability.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="reaching-out">Reaching Out<a href="#reaching-out" class="hash-link" aria-label="Direct link to Reaching Out" title="Direct link to Reaching Out">​</a></h3><p>Join the<a href="/pZero/docs/intro"> discord server </a>to ask any questions you may have or propose changes/ideas.</p><p>We also have a <a href="https://www.youtube.com/@dynamicSuspense00" target="_blank" rel="noopener noreferrer">Youtube channel </a>available with tutorial videos.</p>]]></content>
        <author>
            <name>Christopher Perez</name>
            <uri>https://sebastienlorber.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Welcome]]></title>
        <id>https://chris0016.github.io/pZero/blog/welcome</id>
        <link href="https://chris0016.github.io/pZero/blog/welcome"/>
        <updated>2023-07-17T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Welcome to the Ferrofluid Community, where artists, scientists, and]]></summary>
        <content type="html"><![CDATA[<p><strong>Welcome</strong> to the Ferrofluid Community, where artists, scientists, and
enthusiasts unite to explore the captivating world of controlling
ferrofluids with the power of our minds. Delve into the enchanting realm
of these magnetic-infused liquids as we harness the potential of the
OpenBCI EEG headset, Arduino, and electromagnets. Within this community,
unleash your creativity, share experiences, collaborate on projects,
and push the boundaries of mind-controlled ferrofluid manipulation. Let
your imagination soar as we merge art, technology, and the extraordinary
beauty of ferrofluids. Together, we'll shape the future of this
mesmerizing fusion. Welcome to the Ferrofluid Community—a place where
imagination meets innovation, and where the extraordinary becomes
reality. Join us today and be part of this transformative journey!</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="reaching-out">Reaching Out<a href="#reaching-out" class="hash-link" aria-label="Direct link to Reaching Out" title="Direct link to Reaching Out">​</a></h3><p>Join the<a href="https://discord.gg/SvfMjNP4" target="_blank" rel="noopener noreferrer"> discord server </a>to ask any questions you may have or propose changes/ideas.</p><p>We also have a <a href="https://www.youtube.com/channel/UCo-W0-K8zRfL9zwv4jWnePw" target="_blank" rel="noopener noreferrer">Youtube channel </a>available with tutorial videos.</p>]]></content>
        <author>
            <name>Christopher Perez</name>
            <uri>https://sebastienlorber.com</uri>
        </author>
    </entry>
</feed>