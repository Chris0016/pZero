"use strict";(self.webpackChunkhello_world=self.webpackChunkhello_world||[]).push([[512],{4571:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"fixing-millis-rollover","metadata":{"permalink":"/pZero/blog/fixing-millis-rollover","editUrl":"https://github.com/Chris0016/pZero/tree/main/blog/2023-07-19-fixing-millis()-rollover.md","source":"@site/blog/2023-07-19-fixing-millis()-rollover.md","title":"Fixing the millis() Rollover Issue","description":"If you\'ve encountered the millis() rollover issue in Arduino programming, you\'re not alone. Fortunately, there is a simple solution: leveraging the \\"unsigned long\\" data type. This data type plays a crucial role in ensuring accurate timing by extending the range of millis() and preventing time rollover. But what exactly is the \\"unsigned long\\" data type, and why is it relevant in this context?","date":"2023-07-19T00:00:00.000Z","formattedDate":"July 19, 2023","tags":[],"readingTime":2.08,"hasTruncateMarker":false,"authors":[{"name":"Christopher Perez","title":"MINDFLOW core team","url":"https://sebastienlorber.com","imageURL":"https://github.com/chris0016.png","key":"perez"}],"frontMatter":{"slug":"fixing-millis-rollover","title":"Fixing the millis() Rollover Issue","authors":["perez"],"tags":[]},"nextItem":{"title":"Understanding \\"Static\\" in Arduino","permalink":"/pZero/blog/understanding-static-in-arduino"}},"content":"If you\'ve encountered the millis() rollover issue in Arduino programming, you\'re not alone. Fortunately, there is a simple solution: leveraging the \\"unsigned long\\" data type. This data type plays a crucial role in ensuring accurate timing by extending the range of millis() and preventing time rollover. But what exactly is the \\"unsigned long\\" data type, and why is it relevant in this context?\\n\\nTo address the millis() rollover issue, we can declare a variable of type \\"unsigned long\\" to store the value returned by the millis() function. The \\"unsigned long\\" data type is capable of holding larger numerical values compared to \\"int\\" or \\"long\\". This extended range delays the occurrence of rollovers, allowing for more precise timing over extended periods. By using \\"unsigned long\\" variables to store the millis() value, we can effectively prevent time rollover issues and maintain accurate timekeeping in our Arduino projects.\\n\\n```cpp\\nint period = 1000;\\nunsigned long time_now = 0;\\n  \\nvoid setup() {\\n    Serial.begin(115200);\\n}\\n  \\nvoid loop() {\\n    if(millis() - time_now > period){\\n        time_now = millis();\\n        Serial.println(\\"Hello\\");\\n    }\\n  \\n    //Run other code\\n}\\n```\\n\\nThe \\"unsigned\\" aspect of \\"unsigned long\\" means it represents only non-negative values. This exclusion of negative numbers expands the range of positive values the variable can store. When it comes to timing operations, this is crucial as it ensures our code can handle values beyond what a standard \\"int\\" or \\"long\\" data type can accommodate.\\n\\nUtilizing \\"unsigned long\\" is not only about fixing the millis() rollover issue; it also future-proofs your code. By employing a data type with a larger range, you allow your project to scale and adapt without running into timing limitations if you need it. Whether you\'re working on long-duration timing tasks or planning to expand your project\'s functionality, the \\"unsigned long\\" data type provides the necessary flexibility to handle larger values reliably.\\n\\nIn summary, by utilizing the \\"unsigned long\\" data type, we can overcome the millis() rollover issue and ensure accurate timing in Arduino programming. Its extended range and exclusion of negative values make it a powerful tool for precise timekeeping over prolonged periods. Moreover, the future-proofing aspect ensures your code remains adaptable as your project evolves. Embrace the capabilities of \\"unsigned long\\" and take control of accurate timing in your Arduino projects.\\n\\nFor an even more in detail explanation you can check out this [stackexchange link](https://arduino.stackexchange.com/questions/12587/how-can-i-handle-the-millis-rollover).\\n\\n### Reaching Out\\n\\nJoin the[ discord server ](/docs/intro)to ask any questions you may have or propose changes/ideas.\\n\\nWe also have a [Youtube channel ](https://www.youtube.com/@dynamicSuspense00)available with tutorial videos."},{"id":"understanding-static-in-arduino","metadata":{"permalink":"/pZero/blog/understanding-static-in-arduino","editUrl":"https://github.com/Chris0016/pZero/tree/main/blog/2023-07-19-understanding-static.md","source":"@site/blog/2023-07-19-understanding-static.md","title":"Understanding \\"Static\\" in Arduino","description":"When it comes to programming with Arduino, you may come across the term \\"static\\" and wonder what it means and why it is used. In this blog post, we will demystify the concept of \\"static\\" in the context of Arduino programming. We will explore its significance and shed light on how leveraging static variables and functions can lead to more efficient and organized code. So, let\'s dive in and unravel the power of \\"static\\" in Arduino!","date":"2023-07-19T00:00:00.000Z","formattedDate":"July 19, 2023","tags":[],"readingTime":2.28,"hasTruncateMarker":false,"authors":[{"name":"Christopher Perez","title":"MINDFLOW core team","url":"https://sebastienlorber.com","imageURL":"https://github.com/chris0016.png","key":"perez"}],"frontMatter":{"slug":"understanding-static-in-arduino","title":"Understanding \\"Static\\" in Arduino","authors":["perez"],"tags":[]},"prevItem":{"title":"Fixing the millis() Rollover Issue","permalink":"/pZero/blog/fixing-millis-rollover"},"nextItem":{"title":"Welcome","permalink":"/pZero/blog/welcome"}},"content":"When it comes to programming with Arduino, you may come across the term \\"static\\" and wonder what it means and why it is used. In this blog post, we will demystify the concept of \\"static\\" in the context of Arduino programming. We will explore its significance and shed light on how leveraging static variables and functions can lead to more efficient and organized code. So, let\'s dive in and unravel the power of \\"static\\" in Arduino!\\n\\n### Understanding the Concept of \\"Static\\"\\n\\nIn Arduino programming, \\"static\\" is a keyword that serves multiple purposes. At its core, it defines the scope and lifetime of a variable or function within a program. By using the \\"static\\" keyword, you can create variables or functions that retain their values or existence even when they go out of scope or when a function is called repeatedly.\\n\\n### Efficient Use of Memory\\n\\nOne significant advantage of using \\"static\\" variables is their ability to conserve memory. In Arduino, where resources are often limited, this becomes particularly important. When a local variable is declared as \\"static,\\" it is allocated memory once, and subsequent function calls do not create new instances of that variable. Instead, the variable retains its value between function calls. This optimization can significantly reduce memory consumption, leaving more resources available for other operations.\\n\\n### Preserving Variable State\\n\\nAnother crucial aspect of \\"static\\" variables is their ability to preserve their state across function calls. If you have a variable that needs to retain its value between different invocations of a function, declaring it as \\"static\\" ensures that the variable\'s value remains intact. This feature is particularly useful for maintaining counters, flags, or other variables that need to persist and track changes across multiple function calls.\\n\\n### Organization and Encapsulation\\n\\nIn addition to memory optimization and state preservation, \\"static\\" can also be used to encapsulate and organize related variables and functions within a single scope. By making variables or functions static within a particular class or function, you limit their visibility to only that scope, enhancing code readability and reducing naming conflicts with other parts of the program. This encapsulation can help maintain a clean and modular code structure, making it easier to understand and maintain your Arduino projects.\\n\\n### Conclusion\\n\\nUnderstanding the concept of \\"static\\" in Arduino programming is crucial for efficient and organized code. By utilizing static variables and functions, you can optimize memory usage, preserve variable state, and encapsulate related code within specific scopes. This not only enhances the performance and reliability of your Arduino projects but also improves code readability and maintainability.\\n\\n### Reaching Out\\n\\nJoin the[ discord server ](/docs/intro)to ask any questions you may have or propose changes/ideas.\\n\\nWe also have a [Youtube channel ](https://www.youtube.com/@dynamicSuspense00)available with tutorial videos."},{"id":"welcome","metadata":{"permalink":"/pZero/blog/welcome","editUrl":"https://github.com/Chris0016/pZero/tree/main/blog/2023-7-17-welcome/index.md","source":"@site/blog/2023-7-17-welcome/index.md","title":"Welcome","description":"Welcome to the Ferrofluid Community, where artists, scientists, and","date":"2023-07-17T00:00:00.000Z","formattedDate":"July 17, 2023","tags":[],"readingTime":0.715,"hasTruncateMarker":false,"authors":[{"name":"Christopher Perez","title":"MINDFLOW core team","url":"https://sebastienlorber.com","imageURL":"https://github.com/chris0016.png","key":"perez"}],"frontMatter":{"slug":"welcome","title":"Welcome","authors":["perez"],"tags":[]},"prevItem":{"title":"Understanding \\"Static\\" in Arduino","permalink":"/pZero/blog/understanding-static-in-arduino"}},"content":"**Welcome** to the Ferrofluid Community, where artists, scientists, and\\nenthusiasts unite to explore the captivating world of controlling\\nferrofluids with the power of our minds. Delve into the enchanting realm\\n of these magnetic-infused liquids as we harness the potential of the\\nOpenBCI EEG headset, Arduino, and electromagnets. Within this community,\\n unleash your creativity, share experiences, collaborate on projects,\\nand push the boundaries of mind-controlled ferrofluid manipulation. Let\\nyour imagination soar as we merge art, technology, and the extraordinary\\n beauty of ferrofluids. Together, we\'ll shape the future of this\\nmesmerizing fusion. Welcome to the Ferrofluid Community\u2014a place where\\nimagination meets innovation, and where the extraordinary becomes\\nreality. Join us today and be part of this transformative journey!\\n\\n\\n### Reaching Out\\n\\nJoin the[ discord server ](https://discord.gg/SvfMjNP4)to ask any questions you may have or propose changes/ideas.\\n\\nWe also have a [Youtube channel ](https://www.youtube.com/channel/UCo-W0-K8zRfL9zwv4jWnePw)available with tutorial videos."}]}')}}]);