"use strict";(self.webpackChunkhello_world=self.webpackChunkhello_world||[]).push([[692],{3905:(n,e,t)=>{t.d(e,{Zo:()=>m,kt:()=>_});var a=t(7294);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function i(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function o(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?i(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,a,r=function(n,e){if(null==n)return{};var t,a,r={},i=Object.keys(n);for(a=0;a<i.length;a++)t=i[a],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(a=0;a<i.length;a++)t=i[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var s=a.createContext({}),p=function(n){var e=a.useContext(s),t=e;return n&&(t="function"==typeof n?n(e):o(o({},e),n)),t},m=function(n){var e=p(n.components);return a.createElement(s.Provider,{value:e},n.children)},d="mdxType",u={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},c=a.forwardRef((function(n,e){var t=n.components,r=n.mdxType,i=n.originalType,s=n.parentName,m=l(n,["components","mdxType","originalType","parentName"]),d=p(t),c=r,_=d["".concat(s,".").concat(c)]||d[c]||u[c]||i;return t?a.createElement(_,o(o({ref:e},m),{},{components:t})):a.createElement(_,o({ref:e},m))}));function _(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var i=t.length,o=new Array(i);o[0]=c;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=n,l[d]="string"==typeof n?n:r,o[1]=l;for(var p=2;p<i;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},6627:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const i={sidebar_position:3},o="OpenBCI Comms",l={unversionedId:"programming-arduino/openbci-comms",id:"programming-arduino/openbci-comms",title:"OpenBCI Comms",description:"At this stage we are ready to receive data from our OpenBCI headset. We can simulate our OpenBCI without actually having one ready yet by creating auto-generated data. This will give us the chance to develop and test out algorithms without actually having to setup the actual headset.",source:"@site/docs/programming-arduino/openbci-comms.md",sourceDirName:"programming-arduino",slug:"/programming-arduino/openbci-comms",permalink:"/pZero/docs/programming-arduino/openbci-comms",draft:!1,editUrl:"https://github.com/Chris0016/pZero/tree/main/docs/programming-arduino/openbci-comms.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Communication with Computer",permalink:"/pZero/docs/programming-arduino/communication-with-computer"},next:{title:"OpenBCI Comms Explained",permalink:"/pZero/docs/programming-arduino/openbci-comms-explained"}},s={},p=[{value:"FAQ",id:"faq",level:2}],m={toc:p},d="wrapper";function u(n){let{components:e,...t}=n;return(0,r.kt)(d,(0,a.Z)({},m,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"openbci-comms"},"OpenBCI Comms"),(0,r.kt)("p",null,"At this stage we are ready to receive data from our OpenBCI headset. We can simulate our OpenBCI without actually having one ready yet by creating auto-generated data. This will give us the chance to develop and test out algorithms without actually having to setup the actual headset."),(0,r.kt)("p",null,"In the next tutorial we'll go over how to setup the Mark IV OpenBCI headset."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arduino Code"))),(0,r.kt)("p",null,"Our Arduino stays the same from the previous article(link me)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'const int MAGNET_1 = 9;\n\n\n//states\ntypedef enum state_t {\n  S_READ,          // 0\n  S_RUNNING,       // 1\n  S_HOLD_MAX_PWM,  // 2\n  S_PAUSE          //3 not used but optional for testing purposes\n\n};\n\nstatic state_t state = S_READ;\n\n//Having a delay as curr_pwm changes towards  target_pwm makes the transition between values smoother and more visible to the user(TO BE TESTED)\nstatic int delay_value = 100;\n\nstatic int prev_pwm_target = 0;\nstatic int curr_pwm_target = 0;\nstatic int curr_pwm = 0;\n\nstatic int flag = 1;  //Used for either moving up or down in pwm\n\nstatic int TARGET_PWM_HOLD_DURATION = 3000;  //Milliseconds, subject to change TODO tunning\nstatic int PAUSE_DURATION = 3000; //FOR DEBBUGING\n\nunsigned long ts = millis();\n\n\n\nvoid setup() {\n  pinMode(MAGNET_1, OUTPUT);\n  analogWrite(MAGNET_1, 100); //Startup motor, for small first pwm values motor might look like it\'s not running. \n  delay(2000);\n  Serial.begin(9600);\n \n}\n\nvoid loop() {\n\n  Serial.println("state " + String(state));\n\n\n  switch (state) {\n    case S_READ:\n      {\n        // Signal Raspberry Pi that it can send the next values\n        Serial.println("Ready");\n\n   \n          while (!Serial.available()) {\n          }\n  \n\n        // Read the data \n        String values = Serial.readStringUntil(\'\\n\');\n        values.trim();\n\n        // Extract the two values\n        int commaIndex = values.indexOf(\',\');\n        String value1Str = values.substring(0, commaIndex);\n        String value2Str = values.substring(commaIndex + 1);\n\n\n        //using only curr_pwm & target_pwm is not explicit when comparing them for switching flag\n        // if only using curr_pwm & target_pwm then:\n        //    on flag switch target_pwm means the "current value"(vs the "previous"(curr_pwm) )\n        //    target_pwm also means what curr_pwm is trying to reach in the other cases\n\n        prev_pwm_target = curr_pwm_target;\n\n        delay_value = value1Str.toInt();\n        curr_pwm_target = value2Str.toInt();\n\n        state = S_RUNNING;\n        int diff = curr_pwm_target - prev_pwm_target;\n\n        if (diff > 0)\n          flag = 1;\n        else if (diff < 0)\n          flag = -1;\n        else\n          state = S_HOLD_MAX_PWM;\n\n        //Cannot set first timer for delay within the S_RUNNING case\n        ts = millis();\n      }\n      break;\n\n    case S_RUNNING:\n      {\n\n        analogWrite(MAGNET_1, curr_pwm);\n        while ( (unsigned long)(millis() - ts) < delay_value) {\n        }\n\n        curr_pwm += flag;\n\n        if ((curr_pwm_target == curr_pwm && flag == 1) || (curr_pwm_target == curr_pwm && flag == -1)) {\n          state = S_HOLD_MAX_PWM;\n        }\n\n        ts = millis();\n      }\n      break;\n\n    case S_HOLD_MAX_PWM:\n      {\n  \n        analogWrite(MAGNET_1, curr_pwm);\n        if ( (unsigned long)(millis() - ts) > TARGET_PWM_HOLD_DURATION) {\n          state = S_READ; //S_PAUSE for testing \n  \n          ts = millis();  \n        }\n        break;\n      }\n    case S_PAUSE:\n      {\n        analogWrite(MAGNET_1, 0);\n        while (  (unsigned long) (millis() - ts) < PAUSE_DURATION) {\n          //do nothing\n        }\n        ts = millis();\n        state = S_READ;\n      }\n      break;\n    default:\n      {\n        state = S_RUNNING;\n  \n      }\n      break;\n  }\n\n  Serial.print(delay_value);\n  Serial.print(",");\n  Serial.print(curr_pwm_target);\n  Serial.print(",");\n  Serial.print(curr_pwm);\n  Serial.print(",");\n  Serial.print(String(flag));\n  \n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"OpenBCI Code"))),(0,r.kt)("p",null,"Install cyton library for python (for Windows run w/o sudo )"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo python3 -m pip install brainflow\n")),(0,r.kt)("p",null,"Included are also some of the code I used for debugging which can also help you if need be."),(0,r.kt)("p",null,"Take a look at the code and try to understand it. The next section will go over the code."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import serial\nimport time\nimport random\nimport math\nimport statistics\n\nfrom brainflow.board_shim import BoardShim, BrainFlowInputParams, LogLevels, BoardIds\nfrom brainflow.data_filter import DataFilter, AggOperations\n\n'''\nCYTON BOARD:\n\nnum eeg(emg,\u2026) channels: 8\n\nnum acceleration channels: 3\n\nsampling rate: 250\n\ncommunication: serial port\n\nsignal gain: 24\n\n'''\n\n##Change these values depending on channel, some channels only go up to 100\nBCI_UPPER_LIMIT = 55_000\nBCI_LOWER_LIMIT = 45_000 #big negative numbers are considered no activity\nSELECTED_CHANNEL = 8\n\nDATA_ROWS = 80\n\n\nDELAY_LOWER_LIMIT = 150\nDELAY_UPPER_LIMIT = 100\nDELAY_STEP = 10\n\n\nPWM_LOWER_LIMIT = 20.0\nPWM_UPPER_LIMIT = 40.0\n#PWM_STEP = 10\n\n\nSLEEP_TIMER = 3\n\n# Handshake signal from Arduino\ndef arduino_ready():\n    while True:\n        #print(\"waiting\")\n        if ser.in_waiting:\n            response = ser.readline().decode('utf-8').rstrip()\n            if response == \"Ready\":\n                return True\n            else:\n                print(\"\\n Recived->>\", response)\n\n\n\ndef send_data(pwmTarget):\n    ## DEBBUGING - Send a random number to the arduino\n    delay = 100\n    pwmTarget = randomMultiple(PWM_LOWER_LIMIT, PWM_UPPER_LIMIT, PWM_STEP)\n        #send values between PWM_LOWER_LIMIT (50) and    PWM_UPPER_LIMIT (255) \n        #that are multiples of PWM_STEP (5)\n        #ex: 55, 100, 75, 250, 160, ... \n  \n\n    ##DEBBUGING - Alternate between to numbers \n\n    # low = 15\n    # high = 50\n\n    # if(isAtHigh):\n    #     pwmTarget = low\n    # else:\n    #     pwmTarget = high\n  \n    ##DEBBUGING - Send fixed values to the arduino\n\n    #delay = 150\n    #pwm_max = 255\n\n    # Send the values to Arduino\n    ser.write(str(delay).encode('utf-8'))\n    ser.write(b',')\n    ser.write(str(pwmTarget).encode('utf-8'))\n    ser.write(b'\\n')\n\ndef randomMultiple(minimum, maximum, step):\n    return random.randint(math.ceil(minimum / step ), math.floor(maximum / step)) * step\n\n\n\n### openBCI Connection ###\n\n#openBCI board setup\nBoardShim.enable_dev_board_logger()\n\n# use synthetic board for demo\nparams = BrainFlowInputParams()\nboard = BoardShim(BoardIds.SYNTHETIC_BOARD.value, params)\n\n#REAL BOARD\n#params = BrainFlowInputParams()\n#params.serial_port = \"/dev/ttyUSB0\" //CHANGE THIS DEPENDING ON YOUR OS\n#board = BoardShim(BoardIds.CYTON_BOARD, params)\n\ndef get_board_data():\n\n    board.prepare_session()\n    board.start_stream()\n    BoardShim.log_message(LogLevels.LEVEL_INFO.value, 'start sleeping in the main thread')\n    time.sleep(SLEEP_TIMER)\n    data = board.get_board_data(DATA_ROWS)\n    board.stop_stream()\n    board.release_session()\n  \n\n  \n    eeg_channels = BoardShim.get_eeg_channels(BoardIds.CYTON_BOARD.value)\n  \n    downsampled_data = []\n\n    # downsample data, it just aggregates data\n    for count, channel in enumerate(eeg_channels):\n        print('Original data for channel %d:' % channel)\n        print(data[channel])\n        # if count == 0:\n        #     downsampled_channel = DataFilter.perform_downsampling(data[channel], 3, AggOperations.MEDIAN.value)\n        # elif count == 1:\n        #     downsampled_channel = DataFilter.perform_downsampling(data[channel], 2, AggOperations.MEAN.value)\n        # else:\n        #     downsampled_channel = DataFilter.perform_downsampling(data[channel], 2, AggOperations.EACH.value)\n  \n        #print('Downsampled data for channel %d:' % channel)\n        #print(downsampled_data)\n\n        # downsampled_data.append(downsampled_channel)\n\n    return data[SELECTED_CHANNEL]\n\n\n\n#Takes a channel with a number of eeg values and converts it to a \n#corresponding value in the range of PWM_LOWER_LIMIT(set to ~20) to PWM_UPPER_LIMIT(set to ~40)\n\ndef process_bci_data(channel):\n  \n    mean =  statistics.mean(channel) \n\n    if (mean < 0 ):\n        return PWM_LOWER_LIMIT\n\n\n    diff = (BCI_UPPER_LIMIT - BCI_LOWER_LIMIT)\n    x = mean - BCI_LOWER_LIMIT\n\n    x_normalized = (x/diff)\n\n    #DEBUGGING\n    #print(\"\\n channel: \\n\", channel, \"\\n\")\n    #print(\"\\n mean: \", mean, \"\\n\")\n    #print(\"\\n x_nomalized:\", x_normalized, \"\\n\")\n\n  \n    return (x_normalized *  (PWM_UPPER_LIMIT - PWM_LOWER_LIMIT) ) + PWM_LOWER_LIMIT \n\ndef get_pwm_value():\n    #Collect data from bci headset\n\n    channel_data = get_board_data()\n    return process_bci_data(channel_data)\n\n#print(get_pwm_value())\n\n### openBCI Connection ###\n\n\n# Set up the serial connection\nser = serial.Serial('/dev/ttyACM0', 9600, timeout=1)  # Change '/dev/ttyACM0' to the correct port for your Arduino\nser.reset_input_buffer()\nser.close()\nser.open()\ntime.sleep(5)\n\ndef main():\n   \n    while True:\n        try:\n            # Wait for Arduino confirmation\n            if arduino_ready():\n                print(\"Arduino Ready\")\n                send_data(get_pwm_value())\n            else:\n                #print(\"Waiting\")\n\n        except KeyboardInterrupt:\n            break\n\n    # Close the serial connection\n    ser.close()\n\n    #iteration = 1 #For DEBUGGING \n\n    '''\n    while True: \n       try:\n            print(\"\\n\\n--------------- Iteration : \", iteration,\"---------------\\n\\n\")\n            pwm = get_pwm_value()\n            print(\"pwm: \", pwm)\n            print(\"\\n\\nsleeping...\\n\\n\")\n            time.sleep(2)\n            iteration = iteration + 1\n        except KeyboardInterrupt:\n            break\n    '''\n\nmain()\n\n")),(0,r.kt)("h2",{id:"faq"},"FAQ"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://askubuntu.com/questions/1017721/python-module-not-found-immediately-after-installing-it"},"PIP Module Not Found Error")))}u.isMDXComponent=!0}}]);